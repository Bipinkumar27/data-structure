https://leetcode.com/problems/unique-paths-ii/

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;        // grid ke rows ki length
        int n = obstacleGrid[0].length;     // grid ke columns ki length

        int[][] dp = new int[m][n];
       /* for(int[] items: dp){
            Arrays.fill(items, -1);
        }
        */
        // return uniquePathsBottomUp(obstacleGrid, dp, m-1, n-1);
        return uniquePathsTopDown(obstacleGrid, dp, m-1, n-1);  // top-down DP call
    }

    public int uniquePathsTopDown(int[][] obstacleGrid, int dp[][], int m, int n){
        // poora grid traverse karenge
        for(int i = 0; i <= m; i++){
            for(int j = 0; j <= n; j++){
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;            // agar obstacle hai to yahan se 0 paths
                }
                else if (i == 0 && j == 0) {
                    dp[i][j] = 1;            // start cell pe bas 1 way hai (khud se)
                }
                else {
                    int up = 0;
                    int left = 0;
                    if (i > 0) {
                        up = dp[i-1][j];      // upar se aaye ways
                    }
                    if (j > 0) {
                        left = dp[i][j-1];    // left se aaye ways
                    }
                    dp[i][j] = up + left;    // dono directions ka sum
                }
            }
        }
        return dp[m][n];  // last cell mein total unique paths
    }

    public int uniquePathsBottomUp(int[][] obstacleGrid, int dp[][], int m, int n){
        // base cases handle kar rahe
        if (m >= 0 && n >= 0 && obstacleGrid[m][n] == 1) {
            return 0;                // destination blocked ho to 0
        }
        if (m == 0 && n == 0) {
            return 1;                // start cell pe 1 way
        }
        if (m < 0 || n < 0) {
            return 0;                // grid ke bahar jaoge to 0
        }

        if (dp[m][n] != -1) {
            return dp[m][n];         // agar already calculate kiya hai to use karo
        }
        int up = uniquePathsBottomUp(obstacleGrid, dp, m-1, n);
        int right = uniquePathsBottomUp(obstacleGrid, dp, m, n-1);

        return dp[m][n] = up + right;  // memoize karke return
    }
}
